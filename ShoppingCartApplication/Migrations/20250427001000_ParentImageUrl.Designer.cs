// <auto-generated />
using System;
using ECommerceApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250427001000_ParentImageUrl")]
    partial class ParentImageUrl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerceApp.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ECommerceApp.Models.Cancellation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CancellationCharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OrderAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProcessedBy")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Cancellations");
                });

            modelBuilder.Entity("ECommerceApp.Models.CartEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ECommerceApp.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ECommerceApp.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Name_Unique")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Electronic devices and accessories",
                            IsActive = true,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Books and magazines",
                            IsActive = true,
                            Name = "Books"
                        });
                });

            modelBuilder.Entity("ECommerceApp.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "IX_Email_Unique")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ECommerceApp.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ECommerceApp.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalBaseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommerceApp.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ECommerceApp.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ECommerceApp.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Variety")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ParentProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "All smartphone varieties.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/smartphone.jpg",
                            IsAvailable = true,
                            Name = "Smartphone",
                            Price = 0m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "All laptop varieties.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/laptop.jpg",
                            IsAvailable = true,
                            Name = "Laptop",
                            Price = 0m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "All headphones varieties.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/headphones.jpg",
                            IsAvailable = true,
                            Name = "Headphones",
                            Price = 0m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "All Science Fiction",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/scifi-novel.jpeg",
                            IsAvailable = true,
                            Name = "Science Fiction Novel",
                            Price = 0m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Penguin",
                            CategoryId = 2,
                            Description = "Dune by Frank Herbert.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/dune.jpeg",
                            IsAvailable = true,
                            Model = "Dune",
                            Name = "Book",
                            ParentProductId = 4,
                            Price = 14.99m,
                            StockQuantity = 20,
                            Variety = "Science Fiction"
                        },
                        new
                        {
                            Id = 6,
                            Brand = "HarperCollins",
                            CategoryId = 2,
                            Description = "Neuromancer by William Gibson.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/neuromancer.jpeg",
                            IsAvailable = true,
                            Model = "Neuromancer",
                            Name = "Book",
                            ParentProductId = 4,
                            Price = 12.99m,
                            StockQuantity = 18,
                            Variety = "Science Fiction"
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Orbit",
                            CategoryId = 2,
                            Description = "The Expanse by James S. A. Corey.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/expanse.jpeg",
                            IsAvailable = true,
                            Model = "The Expanse",
                            Name = "Book",
                            ParentProductId = 4,
                            Price = 16.99m,
                            StockQuantity = 14,
                            Variety = "Science Fiction"
                        },
                        new
                        {
                            Id = 8,
                            Brand = "Tor",
                            CategoryId = 2,
                            Description = "Red Mars by Kim Stanley Robinson.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/redmars.jpeg",
                            IsAvailable = true,
                            Model = "Red Mars",
                            Name = "Book",
                            ParentProductId = 4,
                            Price = 13.99m,
                            StockQuantity = 15,
                            Variety = "Science Fiction"
                        },
                        new
                        {
                            Id = 9,
                            Brand = "Del Rey",
                            CategoryId = 2,
                            Description = "Foundation by Isaac Asimov.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/foundation.jpeg",
                            IsAvailable = true,
                            Model = "Foundation",
                            Name = "Book",
                            ParentProductId = 4,
                            Price = 11.99m,
                            StockQuantity = 17,
                            Variety = "Science Fiction"
                        },
                        new
                        {
                            Id = 10,
                            Brand = "Ace",
                            CategoryId = 2,
                            Description = "Snow Crash by Neal Stephenson.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/snowcrash.jpeg",
                            IsAvailable = true,
                            Model = "Snow Crash",
                            Name = "Book",
                            ParentProductId = 4,
                            Price = 10.99m,
                            StockQuantity = 19,
                            Variety = "Science Fiction"
                        },
                        new
                        {
                            Id = 11,
                            Brand = "Apple",
                            CategoryId = 1,
                            Description = "Apple iPhone 15, 128GB, Blue.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/iphone15-blue.jpeg",
                            IsAvailable = true,
                            Model = "iPhone 15",
                            Name = "Smartphone",
                            ParentProductId = 1,
                            Price = 899.99m,
                            StockQuantity = 20,
                            Variety = "128GB Blue"
                        },
                        new
                        {
                            Id = 12,
                            Brand = "Apple",
                            CategoryId = 1,
                            Description = "Apple iPhone 15, 256GB, Black.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/iphone15-black.jpeg",
                            IsAvailable = true,
                            Model = "iPhone 15",
                            Name = "Smartphone",
                            ParentProductId = 1,
                            Price = 999.99m,
                            StockQuantity = 15,
                            Variety = "256GB Black"
                        },
                        new
                        {
                            Id = 13,
                            Brand = "Samsung",
                            CategoryId = 1,
                            Description = "Samsung Galaxy S24, 128GB, Silver.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/galaxys24-silver.jpeg",
                            IsAvailable = true,
                            Model = "Galaxy S24",
                            Name = "Smartphone",
                            ParentProductId = 1,
                            Price = 799.99m,
                            StockQuantity = 18,
                            Variety = "128GB Silver"
                        },
                        new
                        {
                            Id = 14,
                            Brand = "Samsung",
                            CategoryId = 1,
                            Description = "Samsung Galaxy S24, 256GB, Black.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/galaxys24-black.jpeg",
                            IsAvailable = true,
                            Model = "Galaxy S24",
                            Name = "Smartphone",
                            ParentProductId = 1,
                            Price = 899.99m,
                            StockQuantity = 12,
                            Variety = "256GB Black"
                        },
                        new
                        {
                            Id = 15,
                            Brand = "Google",
                            CategoryId = 1,
                            Description = "Google Pixel 8, 128GB, White.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/pixel8-white.jpeg",
                            IsAvailable = true,
                            Model = "Pixel 8",
                            Name = "Smartphone",
                            ParentProductId = 1,
                            Price = 699.99m,
                            StockQuantity = 10,
                            Variety = "128GB White"
                        },
                        new
                        {
                            Id = 16,
                            Brand = "Google",
                            CategoryId = 1,
                            Description = "Google Pixel 8, 256GB, Black.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/pixel8-black.jpeg",
                            IsAvailable = true,
                            Model = "Pixel 8",
                            Name = "Smartphone",
                            ParentProductId = 1,
                            Price = 799.99m,
                            StockQuantity = 8,
                            Variety = "256GB Black"
                        },
                        new
                        {
                            Id = 17,
                            Brand = "Apple",
                            CategoryId = 1,
                            Description = "Apple MacBook Air M2, 256GB.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/macbookair-m2.jpeg",
                            IsAvailable = true,
                            Model = "MacBook Air",
                            Name = "Laptop",
                            ParentProductId = 2,
                            Price = 1199.99m,
                            StockQuantity = 10,
                            Variety = "M2 256GB"
                        },
                        new
                        {
                            Id = 18,
                            Brand = "Apple",
                            CategoryId = 1,
                            Description = "Apple MacBook Pro M3, 512GB.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/macbookpro-m3.jpeg",
                            IsAvailable = true,
                            Model = "MacBook Pro",
                            Name = "Laptop",
                            ParentProductId = 2,
                            Price = 1999.99m,
                            StockQuantity = 6,
                            Variety = "M3 512GB"
                        },
                        new
                        {
                            Id = 19,
                            Brand = "Dell",
                            CategoryId = 1,
                            Description = "Dell XPS 13, i7, 16GB RAM, 512GB SSD.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/dell-xps13.jpeg",
                            IsAvailable = true,
                            Model = "XPS 13",
                            Name = "Laptop",
                            ParentProductId = 2,
                            Price = 1399.99m,
                            StockQuantity = 9,
                            Variety = "i7 16GB 512GB"
                        },
                        new
                        {
                            Id = 20,
                            Brand = "Dell",
                            CategoryId = 1,
                            Description = "Dell Inspiron 15, i5, 8GB RAM, 256GB SSD.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/dell-inspiron15.jpeg",
                            IsAvailable = true,
                            Model = "Inspiron 15",
                            Name = "Laptop",
                            ParentProductId = 2,
                            Price = 799.99m,
                            StockQuantity = 14,
                            Variety = "i5 8GB 256GB"
                        },
                        new
                        {
                            Id = 21,
                            Brand = "HP",
                            CategoryId = 1,
                            Description = "HP Spectre x360, i7, 16GB RAM, 1TB SSD.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/hp-spectre-x360.jpeg",
                            IsAvailable = true,
                            Model = "Spectre x360",
                            Name = "Laptop",
                            ParentProductId = 2,
                            Price = 1599.99m,
                            StockQuantity = 7,
                            Variety = "i7 16GB 1TB"
                        },
                        new
                        {
                            Id = 22,
                            Brand = "Lenovo",
                            CategoryId = 1,
                            Description = "Lenovo ThinkPad X1, i7, 16GB RAM, 512GB SSD.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/lenovo-thinkpad-x1.jpeg",
                            IsAvailable = true,
                            Model = "ThinkPad X1",
                            Name = "Laptop",
                            ParentProductId = 2,
                            Price = 1499.99m,
                            StockQuantity = 5,
                            Variety = "i7 16GB 512GB"
                        },
                        new
                        {
                            Id = 23,
                            Brand = "Sony",
                            CategoryId = 1,
                            Description = "Sony WH-1000XM5, Black.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/sony-xm5-black.jpeg",
                            IsAvailable = true,
                            Model = "WH-1000XM5",
                            Name = "Headphones",
                            ParentProductId = 3,
                            Price = 399.99m,
                            StockQuantity = 10,
                            Variety = "Black"
                        },
                        new
                        {
                            Id = 24,
                            Brand = "Sony",
                            CategoryId = 1,
                            Description = "Sony WH-1000XM5, Silver.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/sony-xm5-silver.jpeg",
                            IsAvailable = true,
                            Model = "WH-1000XM5",
                            Name = "Headphones",
                            ParentProductId = 3,
                            Price = 399.99m,
                            StockQuantity = 8,
                            Variety = "Silver"
                        },
                        new
                        {
                            Id = 25,
                            Brand = "Bose",
                            CategoryId = 1,
                            Description = "Bose QC45, Black.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/bose-qc45-black.jpeg",
                            IsAvailable = true,
                            Model = "QC45",
                            Name = "Headphones",
                            ParentProductId = 3,
                            Price = 329.99m,
                            StockQuantity = 12,
                            Variety = "Black"
                        },
                        new
                        {
                            Id = 26,
                            Brand = "Bose",
                            CategoryId = 1,
                            Description = "Bose QC45, White.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/bose-qc45-white.jpeg",
                            IsAvailable = true,
                            Model = "QC45",
                            Name = "Headphones",
                            ParentProductId = 3,
                            Price = 329.99m,
                            StockQuantity = 11,
                            Variety = "White"
                        },
                        new
                        {
                            Id = 27,
                            Brand = "Apple",
                            CategoryId = 1,
                            Description = "Apple AirPods Max, Space Gray.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/airpods-max-gray.jpeg",
                            IsAvailable = true,
                            Model = "AirPods Max",
                            Name = "Headphones",
                            ParentProductId = 3,
                            Price = 549.99m,
                            StockQuantity = 6,
                            Variety = "Space Gray"
                        },
                        new
                        {
                            Id = 28,
                            Brand = "Apple",
                            CategoryId = 1,
                            Description = "Apple AirPods Max, Silver.",
                            DiscountPercentage = 0,
                            ImageUrl = "/images/airpods-max-silver.jpeg",
                            IsAvailable = true,
                            Model = "AirPods Max",
                            Name = "Headphones",
                            ParentProductId = 3,
                            Price = 549.99m,
                            StockQuantity = 4,
                            Variety = "Silver"
                        });
                });

            modelBuilder.Entity("ECommerceApp.Models.Refund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CancellationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InitiatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessedBy")
                        .HasColumnType("int");

                    b.Property<string>("RefundMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefundReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CancellationId")
                        .IsUnique();

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("ECommerceApp.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Processing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Shipped"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delivered"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Canceled"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Failed"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Refunded"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ECommerceApp.Models.Address", b =>
                {
                    b.HasOne("ECommerceApp.Models.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECommerceApp.Models.Cancellation", b =>
                {
                    b.HasOne("ECommerceApp.Models.Order", "Order")
                        .WithOne("Cancellation")
                        .HasForeignKey("ECommerceApp.Models.Cancellation", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommerceApp.Models.CartEntity", b =>
                {
                    b.HasOne("ECommerceApp.Models.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECommerceApp.Models.CartItem", b =>
                {
                    b.HasOne("ECommerceApp.Models.CartEntity", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceApp.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceApp.Models.Feedback", b =>
                {
                    b.HasOne("ECommerceApp.Models.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommerceApp.Models.Product", "Product")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceApp.Models.Order", b =>
                {
                    b.HasOne("ECommerceApp.Models.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommerceApp.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceApp.Models.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingAddress");

                    b.Navigation("Customer");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("ECommerceApp.Models.OrderItem", b =>
                {
                    b.HasOne("ECommerceApp.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceApp.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceApp.Models.Payment", b =>
                {
                    b.HasOne("ECommerceApp.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("ECommerceApp.Models.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommerceApp.Models.Product", b =>
                {
                    b.HasOne("ECommerceApp.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceApp.Models.Product", "ParentProduct")
                        .WithMany("Varieties")
                        .HasForeignKey("ParentProductId");

                    b.Navigation("Category");

                    b.Navigation("ParentProduct");
                });

            modelBuilder.Entity("ECommerceApp.Models.Refund", b =>
                {
                    b.HasOne("ECommerceApp.Models.Cancellation", "Cancellation")
                        .WithOne("Refund")
                        .HasForeignKey("ECommerceApp.Models.Refund", "CancellationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceApp.Models.Payment", "Payment")
                        .WithOne("Refund")
                        .HasForeignKey("ECommerceApp.Models.Refund", "PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cancellation");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerceApp.Models.Cancellation", b =>
                {
                    b.Navigation("Refund");
                });

            modelBuilder.Entity("ECommerceApp.Models.CartEntity", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ECommerceApp.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerceApp.Models.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Carts");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ECommerceApp.Models.Order", b =>
                {
                    b.Navigation("Cancellation");

                    b.Navigation("OrderItems");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("ECommerceApp.Models.Payment", b =>
                {
                    b.Navigation("Refund");
                });

            modelBuilder.Entity("ECommerceApp.Models.Product", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("OrderItems");

                    b.Navigation("Varieties");
                });
#pragma warning restore 612, 618
        }
    }
}
